{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Start","text":"<p>PhotoFF is a high-performance image processing library that uses CUDA to achieve exceptional processing speeds. Designed to maximize performance through efficient GPU memory management.</p>"},{"location":"#basic-example","title":"Basic Example","text":"<pre><code>from photoff.operations.filters import apply_gaussian_blur, apply_corner_radius\nfrom photoff.io import save_image, load_image\nfrom photoff import CudaImage\n\n# Load the image in GPU memory\nsrc_image: CudaImage = load_image(\"./assets/stock.jpg\")\n\n# Apply filters\napply_gaussian_blur(src_image, radius=5.0)\napply_corner_radius(src_image, size=200)\n\n# Save the result\nsave_image(src_image, \"./assets/gaussian_blur_test.png\")\n\n# Free the image from GPU memory\nsrc_image.free()\n</code></pre>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Pythonic Interface: Clean, intuitive API designed for both beginners and advanced users</li> <li>Robust Image Manipulation: Comprehensive suite of operations including filters, transforms, and compositing</li> <li>Seamless Integration: Works with common image formats through PIL interoperability</li> <li>CUDA-Accelerated Processing: Harness the power of your GPU for blazing-fast image operations</li> <li>Memory-Efficient Design: Optional advanced memory management for optimized buffer management</li> </ul>"},{"location":"advanced/","title":"Advanced","text":"<p>PhotoFF is a high-performance image processing library that uses CUDA to achieve exceptional processing speeds. Designed to maximize performance through efficient GPU memory management.</p>"},{"location":"advanced/#basic-example","title":"Basic Example","text":"<pre><code>from photoff.operations.filters import apply_gaussian_blur, apply_corner_radius\nfrom photoff.io import save_image, load_image\nfrom photoff import Image\n\n# Load the image\nsrc_image = load_image(\"./assets/stock.jpg\")\n\n# Apply filters\napply_gaussian_blur(src_image, radius=5.0)\napply_corner_radius(src_image, size=200)\n\n# Save the result\nsave_image(src_image, \"./assets/gaussian_blur_test.png\")\n\n# Free resources\nsrc_image.free()\n</code></pre>"},{"location":"advanced/#key-features","title":"Key Features","text":"<ul> <li>CUDA-Accelerated Processing: Harness the power of your GPU for blazing-fast image operations</li> <li>Memory-Efficient Design: Optimized buffer management minimizes memory overhead</li> <li>Robust Image Manipulation: Comprehensive suite of operations including filters, transforms, and compositing</li> <li>Pythonic Interface: Clean, intuitive API designed for both beginners and advanced users</li> <li>Seamless Integration: Works with common image formats through PIL interoperability</li> </ul>"},{"location":"api/","title":"API","text":"<p>PhotoFF is a high-performance image processing library that uses CUDA to achieve exceptional processing speeds. Designed to maximize performance through efficient GPU memory management.</p>"},{"location":"api/#basic-example","title":"Basic Example","text":"<pre><code>from photoff.operations.filters import apply_gaussian_blur, apply_corner_radius\nfrom photoff.io import save_image, load_image\nfrom photoff import Image\n\n# Load the image\nsrc_image = load_image(\"./assets/stock.jpg\")\n\n# Apply filters\napply_gaussian_blur(src_image, radius=5.0)\napply_corner_radius(src_image, size=200)\n\n# Save the result\nsave_image(src_image, \"./assets/gaussian_blur_test.png\")\n\n# Free resources\nsrc_image.free()\n</code></pre>"},{"location":"api/#key-features","title":"Key Features","text":"<ul> <li>CUDA-Accelerated Processing: Harness the power of your GPU for blazing-fast image operations</li> <li>Memory-Efficient Design: Optimized buffer management minimizes memory overhead</li> <li>Robust Image Manipulation: Comprehensive suite of operations including filters, transforms, and compositing</li> <li>Pythonic Interface: Clean, intuitive API designed for both beginners and advanced users</li> <li>Seamless Integration: Works with common image formats through PIL interoperability</li> </ul>"},{"location":"basics/","title":"PhotoFF Basics","text":"<p>This guide covers the fundamental concepts and operations of the PhotoFF library. After reading this, you'll understand how to load, manipulate, and save images using GPU acceleration.</p>"},{"location":"basics/#core-concepts","title":"Core Concepts","text":"<p>PhotoFF is built around a few key concepts:</p>"},{"location":"basics/#cudaimage","title":"CudaImage","text":"<p>The <code>CudaImage</code> class is the central object in PhotoFF. It represents an image stored in GPU memory as a RGBA buffer.</p> <pre><code>from photoff.core.types import CudaImage\n\n# Create a blank 800x600 image\nimage = CudaImage(800, 600)\n\n# Always free GPU memory when done\nimage.free()\n</code></pre>"},{"location":"basics/#rgba","title":"RGBA","text":"<p>PhotoFF uses the RGBA color model (Red, Green, Blue, Alpha) for all operations:</p> <pre><code>from photoff.core.types import RGBA\n\n# Create colors\nred = RGBA(255, 0, 0, 255)         # Solid red\nblue = RGBA(0, 0, 255, 255)        # Solid blue\nsemi_transparent = RGBA(0, 255, 0, 128)  # Semi-transparent green\ntransparent = RGBA(0, 0, 0, 0)     # Completely transparent\n</code></pre>"},{"location":"basics/#basic-operations","title":"Basic Operations","text":""},{"location":"basics/#loading-and-saving-images","title":"Loading and Saving Images","text":"<p>To load images from disk and save them back:</p> <pre><code>from photoff.io import load_image, save_image\nfrom photoff.core.types import CudaImage\n\n# Load an image from disk\nimage = load_image(\"input.jpg\")\n\n# Save an image to disk\nsave_image(image, \"output.png\")\n\n# Always free memory when done\nimage.free()\n</code></pre>"},{"location":"basics/#image-filling","title":"Image Filling","text":"<p>Fill an image with a solid color or gradient:</p> <pre><code>from photoff.operations.fill import fill_color, fill_gradient\nfrom photoff.core.types import CudaImage, RGBA\n\n# Create and fill with solid color\nimage = CudaImage(400, 300)\nfill_color(image, RGBA(255, 0, 0, 255))  # Fill with red\n\n# Fill with gradient\nstart_color = RGBA(255, 0, 0, 255)  # Red\nend_color = RGBA(0, 0, 255, 255)    # Blue\ndirection = 0  # 0: horizontal, 1: vertical, 2: diagonal, 3: radial\nseamless = False\nfill_gradient(image, start_color, end_color, direction, seamless)\n\n# Don't forget to free\nimage.free()\n</code></pre>"},{"location":"basics/#applying-filters","title":"Applying Filters","text":"<p>PhotoFF offers various filters to modify images:</p> <pre><code>from photoff.operations.filters import apply_gaussian_blur, apply_corner_radius, apply_grayscale\nfrom photoff.io import load_image, save_image\n\n# Load an image\nimage = load_image(\"input.jpg\")\n\n# Apply a Gaussian blur\napply_gaussian_blur(image, radius=5.0)\n\n# Round the corners\napply_corner_radius(image, size=20)\n\n# Convert to grayscale\napply_grayscale(image)\n\n# Save the result\nsave_image(image, \"filtered.png\")\nimage.free()\n</code></pre>"},{"location":"basics/#resizing-images","title":"Resizing Images","text":"<p>Resize images with different interpolation methods:</p> <pre><code>from photoff.operations.resize import resize, ResizeMethod\nfrom photoff.io import load_image, save_image\n\n# Load an image\nimage = load_image(\"input.jpg\")\n\n# Resize to 400x300 using bicubic interpolation\nresized = resize(image, 400, 300, method=ResizeMethod.BICUBIC)\n\n# Save the result\nsave_image(resized, \"resized.png\")\n\n# Free both images\nimage.free()\nresized.free()\n</code></pre>"},{"location":"basics/#blending-images","title":"Blending Images","text":"<p>Combine multiple images together:</p> <pre><code>from photoff.operations.blend import blend\nfrom photoff.io import load_image, save_image\nfrom photoff.core.types import CudaImage, RGBA\nfrom photoff.operations.fill import fill_color\n\n# Create a background\nbackground = CudaImage(800, 600)\nfill_color(background, RGBA(200, 200, 200, 255))  # Light gray\n\n# Load a foreground image\nforeground = load_image(\"logo.png\")\n\n# Blend the foreground onto the background at position (100, 100)\nblend(background, foreground, 100, 100)\n\n# Save the result\nsave_image(background, \"blended.png\")\n\n# Free memory\nbackground.free()\nforeground.free()\n</code></pre>"},{"location":"basics/#memory-management","title":"Memory Management","text":"<p>PhotoFF operates on GPU memory, which makes it fast but requires careful management:</p> <ol> <li>Always call <code>.free()</code> on any <code>CudaImage</code> when you're done with it</li> <li>For complex operations, consider reusing existing buffers:</li> </ol> <pre><code># Inefficient - creates a new buffer for each operation\nimage = load_image(\"input.jpg\")\napply_gaussian_blur(image, radius=5.0)\napply_corner_radius(image, size=20)\nsave_image(image, \"output.png\")\nimage.free()\n\n# More efficient - reuses the buffer for the blur operation\nimage = load_image(\"input.jpg\")\nbuffer = CudaImage(image.width, image.height)  # Create once, reuse multiple times\napply_gaussian_blur(image, radius=5.0, image_copy_cache=buffer)\napply_corner_radius(image, size=20)\nsave_image(image, \"output.png\")\nimage.free()\nbuffer.free()\n</code></pre>"},{"location":"basics/#basic-image-processing-workflow","title":"Basic Image Processing Workflow","text":"<p>A typical workflow using PhotoFF might look like this:</p> <pre><code>from photoff.io import load_image, save_image\nfrom photoff.operations.filters import apply_gaussian_blur, apply_corner_radius\nfrom photoff.operations.resize import resize, ResizeMethod\n\n# Load the image\noriginal = load_image(\"input.jpg\")\n\n# Resize if needed\nif original.width &gt; 1000 or original.height &gt; 1000:\n    resized = resize(original, 1000, 1000, method=ResizeMethod.BICUBIC)\n    original.free()  # Free the original once we have the resized copy\n    image = resized\nelse:\n    image = original\n\n# Create a buffer for operations that need it\nbuffer = CudaImage(image.width, image.height)\n\n# Apply processing operations\napply_gaussian_blur(image, radius=3.0, image_copy_cache=buffer)\napply_corner_radius(image, size=30)\n\n# Save the result\nsave_image(image, \"processed.png\")\n\n# Clean up\nimage.free()\nbuffer.free()\n</code></pre>"},{"location":"basics/#next-steps","title":"Next Steps","text":"<p>Now that you understand the basics, you can:</p> <ul> <li>Explore the Advanced Topics for more complex operations</li> <li>Check the API Reference for detailed information on all functions</li> <li>Try combining multiple effects to create unique image transformations</li> </ul>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#prerequisites","title":"Prerequisites","text":"<p>Before installing PhotoFF, ensure you have the following prerequisites:</p> <ul> <li>Python 3.9 or newer</li> <li>NVIDIA GPU with CUDA support</li> <li>CUDA Toolkit 11.0 or newer - Required for compiling the CUDA components</li> <li>Visual Studio with C++ support (Windows) - Required for the CUDA compiler</li> </ul>"},{"location":"installation/#installing-cuda-toolkit","title":"Installing CUDA Toolkit","text":"<ol> <li>Download the CUDA Toolkit from the NVIDIA Developer website</li> <li>Follow the installation instructions for your operating system</li> <li>Make sure the CUDA binaries are in your system PATH (this usually happens automatically during installation)</li> <li>Verify your installation by running <code>nvcc --version</code> in your terminal</li> </ol>"},{"location":"installation/#install-from-source","title":"Install from Source","text":"<p>This method builds and installs the package from source code:</p> <ol> <li> <p>Clone the repository:    <pre><code>git clone https://github.com/offerrall/photoff.git\ncd photoff\n</code></pre></p> </li> <li> <p>Compile the CUDA DLL:    <pre><code>python photoff_cuda_src/compile.py\n</code></pre></p> </li> <li> <p>Move the compiled <code>photoff.dll</code> to a directory in your system PATH or add the directory containing the DLL to your PATH environment variable.</p> </li> <li> <p>Install the Python package:    <pre><code>pip install .\n</code></pre></p> </li> </ol>"},{"location":"installation/#verifying-the-installation","title":"Verifying the Installation","text":"<p>To verify your installation, run the following Python code:</p> <pre><code>from photoff.operations.fill import fill_color\nfrom photoff.io import save_image\nfrom photoff.core.types import CudaImage, RGBA\n\n# Create a 200x200 red square\nimg = CudaImage(200, 200)\nfill_color(img, RGBA(255, 0, 0, 255))\nsave_image(img, \"red_square.png\")\nimg.free()\n\nprint(\"Installation successful!\")\n</code></pre> <p>If you see a 200x200 red square image saved as \"red_square.png\" and the message \"Installation successful!\" printed to the console, your installation is working correctly.</p>"},{"location":"learn/","title":"Overview","text":"<p>PhotoFF is a high-performance image processing library that uses CUDA to achieve exceptional processing speeds. Designed to maximize performance through efficient GPU memory management.</p>"},{"location":"learn/#basic-example","title":"Basic Example","text":"<pre><code>from photoff.operations.filters import apply_gaussian_blur, apply_corner_radius\nfrom photoff.io import save_image, load_image\nfrom photoff import Image\n\n# Load the image\nsrc_image = load_image(\"./assets/stock.jpg\")\n\n# Apply filters\napply_gaussian_blur(src_image, radius=5.0)\napply_corner_radius(src_image, size=200)\n\n# Save the result\nsave_image(src_image, \"./assets/gaussian_blur_test.png\")\n\n# Free resources\nsrc_image.free()\n</code></pre>"},{"location":"learn/#key-features","title":"Key Features","text":"<ul> <li>CUDA-Accelerated Processing: Harness the power of your GPU for blazing-fast image operations</li> <li>Memory-Efficient Design: Optimized buffer management minimizes memory overhead</li> <li>Robust Image Manipulation: Comprehensive suite of operations including filters, transforms, and compositing</li> <li>Pythonic Interface: Clean, intuitive API designed for both beginners and advanced users</li> <li>Seamless Integration: Works with common image formats through PIL interoperability</li> </ul>"}]}